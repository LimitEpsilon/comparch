;buildInfoPackage: chisel3, version: 3.2.6, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Top : 
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, branch : UInt<1>, memread : UInt<1>, toreg : UInt<2>, add : UInt<1>, memwrite : UInt<1>, regwrite : UInt<1>, immediate : UInt<1>, alusrc1 : UInt<2>, jump : UInt<2>}
    
    node _T = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<6>("h033"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<5>("h013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<2>("h03"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<6>("h023"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<7>("h063"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<6>("h037"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<5>("h017"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<7>("h06f"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<7>("h067"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_19 = mux(_T_15, UInt<1>("h01"), _T_18) @[Lookup.scala 33:37]
    node _T_20 = mux(_T_13, UInt<1>("h00"), _T_19) @[Lookup.scala 33:37]
    node _T_21 = mux(_T_11, UInt<1>("h00"), _T_20) @[Lookup.scala 33:37]
    node _T_22 = mux(_T_9, UInt<1>("h01"), _T_21) @[Lookup.scala 33:37]
    node _T_23 = mux(_T_7, UInt<1>("h00"), _T_22) @[Lookup.scala 33:37]
    node _T_24 = mux(_T_5, UInt<1>("h00"), _T_23) @[Lookup.scala 33:37]
    node _T_25 = mux(_T_3, UInt<1>("h00"), _T_24) @[Lookup.scala 33:37]
    node signals_0 = mux(_T_1, UInt<1>("h00"), _T_25) @[Lookup.scala 33:37]
    node _T_26 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_27 = mux(_T_15, UInt<1>("h00"), _T_26) @[Lookup.scala 33:37]
    node _T_28 = mux(_T_13, UInt<1>("h00"), _T_27) @[Lookup.scala 33:37]
    node _T_29 = mux(_T_11, UInt<1>("h00"), _T_28) @[Lookup.scala 33:37]
    node _T_30 = mux(_T_9, UInt<1>("h00"), _T_29) @[Lookup.scala 33:37]
    node _T_31 = mux(_T_7, UInt<1>("h00"), _T_30) @[Lookup.scala 33:37]
    node _T_32 = mux(_T_5, UInt<1>("h01"), _T_31) @[Lookup.scala 33:37]
    node _T_33 = mux(_T_3, UInt<1>("h00"), _T_32) @[Lookup.scala 33:37]
    node signals_1 = mux(_T_1, UInt<1>("h00"), _T_33) @[Lookup.scala 33:37]
    node _T_34 = mux(_T_17, UInt<2>("h02"), UInt<2>("h03")) @[Lookup.scala 33:37]
    node _T_35 = mux(_T_15, UInt<2>("h02"), _T_34) @[Lookup.scala 33:37]
    node _T_36 = mux(_T_13, UInt<1>("h00"), _T_35) @[Lookup.scala 33:37]
    node _T_37 = mux(_T_11, UInt<1>("h00"), _T_36) @[Lookup.scala 33:37]
    node _T_38 = mux(_T_9, UInt<1>("h00"), _T_37) @[Lookup.scala 33:37]
    node _T_39 = mux(_T_7, UInt<1>("h00"), _T_38) @[Lookup.scala 33:37]
    node _T_40 = mux(_T_5, UInt<1>("h01"), _T_39) @[Lookup.scala 33:37]
    node _T_41 = mux(_T_3, UInt<1>("h00"), _T_40) @[Lookup.scala 33:37]
    node signals_2 = mux(_T_1, UInt<1>("h00"), _T_41) @[Lookup.scala 33:37]
    node _T_42 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_43 = mux(_T_15, UInt<1>("h00"), _T_42) @[Lookup.scala 33:37]
    node _T_44 = mux(_T_13, UInt<1>("h01"), _T_43) @[Lookup.scala 33:37]
    node _T_45 = mux(_T_11, UInt<1>("h01"), _T_44) @[Lookup.scala 33:37]
    node _T_46 = mux(_T_9, UInt<1>("h00"), _T_45) @[Lookup.scala 33:37]
    node _T_47 = mux(_T_7, UInt<1>("h01"), _T_46) @[Lookup.scala 33:37]
    node _T_48 = mux(_T_5, UInt<1>("h01"), _T_47) @[Lookup.scala 33:37]
    node _T_49 = mux(_T_3, UInt<1>("h00"), _T_48) @[Lookup.scala 33:37]
    node signals_3 = mux(_T_1, UInt<1>("h00"), _T_49) @[Lookup.scala 33:37]
    node _T_50 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_51 = mux(_T_15, UInt<1>("h00"), _T_50) @[Lookup.scala 33:37]
    node _T_52 = mux(_T_13, UInt<1>("h00"), _T_51) @[Lookup.scala 33:37]
    node _T_53 = mux(_T_11, UInt<1>("h00"), _T_52) @[Lookup.scala 33:37]
    node _T_54 = mux(_T_9, UInt<1>("h00"), _T_53) @[Lookup.scala 33:37]
    node _T_55 = mux(_T_7, UInt<1>("h01"), _T_54) @[Lookup.scala 33:37]
    node _T_56 = mux(_T_5, UInt<1>("h00"), _T_55) @[Lookup.scala 33:37]
    node _T_57 = mux(_T_3, UInt<1>("h00"), _T_56) @[Lookup.scala 33:37]
    node signals_4 = mux(_T_1, UInt<1>("h00"), _T_57) @[Lookup.scala 33:37]
    node _T_58 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_59 = mux(_T_15, UInt<1>("h00"), _T_58) @[Lookup.scala 33:37]
    node _T_60 = mux(_T_13, UInt<1>("h01"), _T_59) @[Lookup.scala 33:37]
    node _T_61 = mux(_T_11, UInt<1>("h01"), _T_60) @[Lookup.scala 33:37]
    node _T_62 = mux(_T_9, UInt<1>("h00"), _T_61) @[Lookup.scala 33:37]
    node _T_63 = mux(_T_7, UInt<1>("h01"), _T_62) @[Lookup.scala 33:37]
    node _T_64 = mux(_T_5, UInt<1>("h01"), _T_63) @[Lookup.scala 33:37]
    node _T_65 = mux(_T_3, UInt<1>("h01"), _T_64) @[Lookup.scala 33:37]
    node signals_5 = mux(_T_1, UInt<1>("h00"), _T_65) @[Lookup.scala 33:37]
    node _T_66 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_67 = mux(_T_15, UInt<1>("h01"), _T_66) @[Lookup.scala 33:37]
    node _T_68 = mux(_T_13, UInt<1>("h01"), _T_67) @[Lookup.scala 33:37]
    node _T_69 = mux(_T_11, UInt<1>("h01"), _T_68) @[Lookup.scala 33:37]
    node _T_70 = mux(_T_9, UInt<1>("h00"), _T_69) @[Lookup.scala 33:37]
    node _T_71 = mux(_T_7, UInt<1>("h00"), _T_70) @[Lookup.scala 33:37]
    node _T_72 = mux(_T_5, UInt<1>("h01"), _T_71) @[Lookup.scala 33:37]
    node _T_73 = mux(_T_3, UInt<1>("h01"), _T_72) @[Lookup.scala 33:37]
    node signals_6 = mux(_T_1, UInt<1>("h01"), _T_73) @[Lookup.scala 33:37]
    node _T_74 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_75 = mux(_T_15, UInt<1>("h01"), _T_74) @[Lookup.scala 33:37]
    node _T_76 = mux(_T_13, UInt<2>("h02"), _T_75) @[Lookup.scala 33:37]
    node _T_77 = mux(_T_11, UInt<1>("h01"), _T_76) @[Lookup.scala 33:37]
    node _T_78 = mux(_T_9, UInt<1>("h00"), _T_77) @[Lookup.scala 33:37]
    node _T_79 = mux(_T_7, UInt<1>("h00"), _T_78) @[Lookup.scala 33:37]
    node _T_80 = mux(_T_5, UInt<1>("h00"), _T_79) @[Lookup.scala 33:37]
    node _T_81 = mux(_T_3, UInt<1>("h00"), _T_80) @[Lookup.scala 33:37]
    node signals_7 = mux(_T_1, UInt<1>("h00"), _T_81) @[Lookup.scala 33:37]
    node _T_82 = mux(_T_17, UInt<2>("h03"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_83 = mux(_T_15, UInt<2>("h02"), _T_82) @[Lookup.scala 33:37]
    node _T_84 = mux(_T_13, UInt<1>("h00"), _T_83) @[Lookup.scala 33:37]
    node _T_85 = mux(_T_11, UInt<1>("h00"), _T_84) @[Lookup.scala 33:37]
    node _T_86 = mux(_T_9, UInt<1>("h00"), _T_85) @[Lookup.scala 33:37]
    node _T_87 = mux(_T_7, UInt<1>("h00"), _T_86) @[Lookup.scala 33:37]
    node _T_88 = mux(_T_5, UInt<1>("h00"), _T_87) @[Lookup.scala 33:37]
    node _T_89 = mux(_T_3, UInt<1>("h00"), _T_88) @[Lookup.scala 33:37]
    node signals_8 = mux(_T_1, UInt<1>("h00"), _T_89) @[Lookup.scala 33:37]
    io.branch <= signals_0 @[control.scala 65:13]
    io.memread <= signals_1 @[control.scala 66:14]
    io.toreg <= signals_2 @[control.scala 67:12]
    io.add <= signals_3 @[control.scala 68:10]
    io.memwrite <= signals_4 @[control.scala 69:15]
    io.immediate <= signals_5 @[control.scala 70:16]
    io.regwrite <= signals_6 @[control.scala 71:15]
    io.alusrc1 <= signals_7 @[control.scala 72:14]
    io.jump <= signals_8 @[control.scala 73:11]
    
  module BranchControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip branch : UInt<1>, flip funct3 : UInt<3>, flip inputx : UInt<32>, flip inputy : UInt<32>, taken : UInt<1>}
    
    io.taken is invalid @[branch-control.scala 27:12]
    wire check : UInt<1> @[branch-control.scala 29:19]
    check is invalid @[branch-control.scala 30:9]
    node _T = eq(UInt<1>("h00"), io.funct3) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = eq(io.inputx, io.inputy) @[branch-control.scala 33:40]
      check <= _T_1 @[branch-control.scala 33:26]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<1>("h01"), io.funct3) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = neq(io.inputx, io.inputy) @[branch-control.scala 34:40]
        check <= _T_3 @[branch-control.scala 34:26]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<3>("h04"), io.funct3) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = asSInt(io.inputx) @[branch-control.scala 35:40]
          node _T_6 = asSInt(io.inputy) @[branch-control.scala 35:59]
          node _T_7 = lt(_T_5, _T_6) @[branch-control.scala 35:47]
          check <= _T_7 @[branch-control.scala 35:26]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<3>("h05"), io.funct3) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            node _T_9 = asSInt(io.inputx) @[branch-control.scala 36:40]
            node _T_10 = asSInt(io.inputy) @[branch-control.scala 36:60]
            node _T_11 = geq(_T_9, _T_10) @[branch-control.scala 36:47]
            check <= _T_11 @[branch-control.scala 36:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h06"), io.funct3) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              node _T_13 = lt(io.inputx, io.inputy) @[branch-control.scala 37:40]
              check <= _T_13 @[branch-control.scala 37:26]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_14 = eq(UInt<3>("h07"), io.funct3) @[Conditional.scala 37:30]
              when _T_14 : @[Conditional.scala 39:67]
                node _T_15 = geq(io.inputx, io.inputy) @[branch-control.scala 38:40]
                check <= _T_15 @[branch-control.scala 38:26]
                skip @[Conditional.scala 39:67]
    node _T_16 = and(check, io.branch) @[branch-control.scala 41:21]
    io.taken <= _T_16 @[branch-control.scala 41:12]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip readreg1 : UInt<5>, flip readreg2 : UInt<5>, flip writereg : UInt<5>, flip writedata : UInt<32>, flip wen : UInt<1>, readdata1 : UInt<32>, readdata2 : UInt<32>}
    
    reg regs : UInt<32>[32], clock @[register-file.scala 28:17]
    when io.wen : @[register-file.scala 31:17]
      regs[io.writereg] <= io.writedata @[register-file.scala 32:23]
      skip @[register-file.scala 31:17]
    io.readdata1 <= regs[io.readreg1] @[register-file.scala 37:16]
    io.readdata2 <= regs[io.readreg2] @[register-file.scala 38:16]
    node _T = eq(io.readreg1, io.writereg) @[register-file.scala 42:23]
    node _T_1 = and(_T, io.wen) @[register-file.scala 42:39]
    when _T_1 : @[register-file.scala 42:50]
      io.readdata1 <= io.writedata @[register-file.scala 43:20]
      skip @[register-file.scala 42:50]
    else : @[register-file.scala 44:57]
      node _T_2 = eq(io.readreg2, io.writereg) @[register-file.scala 44:30]
      node _T_3 = and(_T_2, io.wen) @[register-file.scala 44:46]
      when _T_3 : @[register-file.scala 44:57]
        io.readdata2 <= io.writedata @[register-file.scala 45:20]
        skip @[register-file.scala 44:57]
    
  module ALUControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip add : UInt<1>, flip immediate : UInt<1>, flip funct7 : UInt<7>, flip funct3 : UInt<3>, operation : UInt<4>}
    
    io.operation <= UInt<4>("h0f") @[alucontrol.scala 30:16]
    when io.add : @[alucontrol.scala 32:17]
      io.operation <= UInt<2>("h02") @[alucontrol.scala 33:18]
      skip @[alucontrol.scala 32:17]
    else : @[alucontrol.scala 34:16]
      node _T = eq(UInt<1>("h00"), io.funct3) @[Conditional.scala 37:30]
      when _T : @[Conditional.scala 40:58]
        node _T_1 = eq(io.funct7, UInt<1>("h00")) @[alucontrol.scala 37:41]
        node _T_2 = or(io.immediate, _T_1) @[alucontrol.scala 37:28]
        when _T_2 : @[alucontrol.scala 37:59]
          io.operation <= UInt<2>("h02") @[alucontrol.scala 38:24]
          skip @[alucontrol.scala 37:59]
        else : @[alucontrol.scala 39:22]
          io.operation <= UInt<2>("h03") @[alucontrol.scala 40:24]
          skip @[alucontrol.scala 39:22]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_3 = eq(UInt<1>("h01"), io.funct3) @[Conditional.scala 37:30]
        when _T_3 : @[Conditional.scala 39:67]
          io.operation <= UInt<3>("h06") @[alucontrol.scala 43:36]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<2>("h02"), io.funct3) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            io.operation <= UInt<3>("h04") @[alucontrol.scala 44:36]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_5 = eq(UInt<2>("h03"), io.funct3) @[Conditional.scala 37:30]
            when _T_5 : @[Conditional.scala 39:67]
              io.operation <= UInt<3>("h05") @[alucontrol.scala 45:36]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_6 = eq(UInt<3>("h04"), io.funct3) @[Conditional.scala 37:30]
              when _T_6 : @[Conditional.scala 39:67]
                io.operation <= UInt<4>("h09") @[alucontrol.scala 46:36]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_7 = eq(UInt<3>("h05"), io.funct3) @[Conditional.scala 37:30]
                when _T_7 : @[Conditional.scala 39:67]
                  node _T_8 = eq(io.funct7, UInt<1>("h00")) @[alucontrol.scala 48:25]
                  when _T_8 : @[alucontrol.scala 48:43]
                    io.operation <= UInt<3>("h07") @[alucontrol.scala 49:24]
                    skip @[alucontrol.scala 48:43]
                  else : @[alucontrol.scala 50:22]
                    io.operation <= UInt<4>("h08") @[alucontrol.scala 51:24]
                    skip @[alucontrol.scala 50:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_9 = eq(UInt<3>("h06"), io.funct3) @[Conditional.scala 37:30]
                  when _T_9 : @[Conditional.scala 39:67]
                    io.operation <= UInt<1>("h01") @[alucontrol.scala 54:36]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_10 = eq(UInt<3>("h07"), io.funct3) @[Conditional.scala 37:30]
                    when _T_10 : @[Conditional.scala 39:67]
                      io.operation <= UInt<1>("h00") @[alucontrol.scala 55:36]
                      skip @[Conditional.scala 39:67]
      skip @[alucontrol.scala 34:16]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip operation : UInt<4>, flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    io.result <= UInt<1>("h00") @[alu.scala 26:13]
    node _T = eq(UInt<1>("h00"), io.operation) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = and(io.inputx, io.inputy) @[alu.scala 30:30]
      io.result <= _T_1 @[alu.scala 30:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<1>("h01"), io.operation) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = or(io.inputx, io.inputy) @[alu.scala 33:30]
        io.result <= _T_3 @[alu.scala 33:17]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<2>("h02"), io.operation) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = add(io.inputx, io.inputy) @[alu.scala 36:30]
          node _T_6 = tail(_T_5, 1) @[alu.scala 36:30]
          io.result <= _T_6 @[alu.scala 36:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_7 = eq(UInt<2>("h03"), io.operation) @[Conditional.scala 37:30]
          when _T_7 : @[Conditional.scala 39:67]
            node _T_8 = sub(io.inputx, io.inputy) @[alu.scala 39:30]
            node _T_9 = tail(_T_8, 1) @[alu.scala 39:30]
            io.result <= _T_9 @[alu.scala 39:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_10 = eq(UInt<3>("h04"), io.operation) @[Conditional.scala 37:30]
            when _T_10 : @[Conditional.scala 39:67]
              node _T_11 = asSInt(io.inputx) @[alu.scala 42:31]
              node _T_12 = asSInt(io.inputy) @[alu.scala 42:50]
              node _T_13 = lt(_T_11, _T_12) @[alu.scala 42:38]
              io.result <= _T_13 @[alu.scala 42:17]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_14 = eq(UInt<3>("h05"), io.operation) @[Conditional.scala 37:30]
              when _T_14 : @[Conditional.scala 39:67]
                node _T_15 = lt(io.inputx, io.inputy) @[alu.scala 45:31]
                io.result <= _T_15 @[alu.scala 45:17]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_16 = eq(UInt<3>("h06"), io.operation) @[Conditional.scala 37:30]
                when _T_16 : @[Conditional.scala 39:67]
                  node _T_17 = bits(io.inputy, 4, 0) @[alu.scala 48:42]
                  node _T_18 = dshl(io.inputx, _T_17) @[alu.scala 48:30]
                  io.result <= _T_18 @[alu.scala 48:17]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_19 = eq(UInt<3>("h07"), io.operation) @[Conditional.scala 37:30]
                  when _T_19 : @[Conditional.scala 39:67]
                    node _T_20 = bits(io.inputy, 4, 0) @[alu.scala 51:42]
                    node _T_21 = dshr(io.inputx, _T_20) @[alu.scala 51:30]
                    io.result <= _T_21 @[alu.scala 51:17]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_22 = eq(UInt<4>("h08"), io.operation) @[Conditional.scala 37:30]
                    when _T_22 : @[Conditional.scala 39:67]
                      node _T_23 = asSInt(io.inputx) @[alu.scala 54:31]
                      node _T_24 = bits(io.inputy, 4, 0) @[alu.scala 54:50]
                      node _T_25 = dshr(_T_23, _T_24) @[alu.scala 54:38]
                      node _T_26 = asUInt(_T_25) @[alu.scala 54:57]
                      io.result <= _T_26 @[alu.scala 54:17]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_27 = eq(UInt<4>("h09"), io.operation) @[Conditional.scala 37:30]
                      when _T_27 : @[Conditional.scala 39:67]
                        node _T_28 = xor(io.inputx, io.inputy) @[alu.scala 57:30]
                        io.result <= _T_28 @[alu.scala 57:17]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_29 = eq(UInt<4>("h0a"), io.operation) @[Conditional.scala 37:30]
                        when _T_29 : @[Conditional.scala 39:67]
                          node _T_30 = or(io.inputx, io.inputy) @[alu.scala 60:32]
                          node _T_31 = not(_T_30) @[alu.scala 60:20]
                          io.result <= _T_31 @[alu.scala 60:17]
                          skip @[Conditional.scala 39:67]
    
  module ImmediateGenerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, sextImm : UInt<32>}
    
    io.sextImm <= UInt<1>("h00") @[helpers.scala 42:14]
    node opcode = bits(io.instruction, 6, 0) @[helpers.scala 44:30]
    node _T = eq(UInt<6>("h037"), opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = bits(io.instruction, 31, 12) @[helpers.scala 47:31]
      node _T_2 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
      node _T_3 = cat(_T_1, _T_2) @[Cat.scala 29:58]
      io.sextImm <= _T_3 @[helpers.scala 48:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<5>("h017"), opcode) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = bits(io.instruction, 31, 12) @[helpers.scala 51:31]
        node _T_6 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
        node _T_7 = cat(_T_5, _T_6) @[Cat.scala 29:58]
        io.sextImm <= _T_7 @[helpers.scala 52:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<7>("h06f"), opcode) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          node _T_9 = bits(io.instruction, 31, 31) @[helpers.scala 55:35]
          node _T_10 = bits(io.instruction, 19, 12) @[helpers.scala 55:55]
          node _T_11 = bits(io.instruction, 20, 20) @[helpers.scala 56:35]
          node _T_12 = bits(io.instruction, 30, 21) @[helpers.scala 56:55]
          node _T_13 = cat(_T_11, _T_12) @[Cat.scala 29:58]
          node _T_14 = cat(_T_9, _T_10) @[Cat.scala 29:58]
          node _T_15 = cat(_T_14, _T_13) @[Cat.scala 29:58]
          node _T_16 = bits(_T_15, 19, 19) @[helpers.scala 57:36]
          node _T_17 = bits(_T_16, 0, 0) @[Bitwise.scala 72:15]
          node _T_18 = mux(_T_17, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
          node _T_19 = cat(_T_18, _T_15) @[Cat.scala 29:58]
          node _T_20 = cat(_T_19, UInt<1>("h00")) @[Cat.scala 29:58]
          io.sextImm <= _T_20 @[helpers.scala 57:18]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_21 = eq(UInt<7>("h067"), opcode) @[Conditional.scala 37:30]
          when _T_21 : @[Conditional.scala 39:67]
            node _T_22 = bits(io.instruction, 31, 20) @[helpers.scala 60:31]
            node _T_23 = bits(_T_22, 11, 11) @[helpers.scala 61:36]
            node _T_24 = bits(_T_23, 0, 0) @[Bitwise.scala 72:15]
            node _T_25 = mux(_T_24, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
            node _T_26 = cat(_T_25, _T_22) @[Cat.scala 29:58]
            io.sextImm <= _T_26 @[helpers.scala 61:18]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_27 = eq(UInt<7>("h063"), opcode) @[Conditional.scala 37:30]
            when _T_27 : @[Conditional.scala 39:67]
              node _T_28 = bits(io.instruction, 31, 31) @[helpers.scala 64:35]
              node _T_29 = bits(io.instruction, 7, 7) @[helpers.scala 64:55]
              node _T_30 = bits(io.instruction, 30, 25) @[helpers.scala 65:35]
              node _T_31 = bits(io.instruction, 11, 8) @[helpers.scala 65:58]
              node _T_32 = cat(_T_30, _T_31) @[Cat.scala 29:58]
              node _T_33 = cat(_T_28, _T_29) @[Cat.scala 29:58]
              node _T_34 = cat(_T_33, _T_32) @[Cat.scala 29:58]
              node _T_35 = bits(_T_34, 11, 11) @[helpers.scala 66:37]
              node _T_36 = bits(_T_35, 0, 0) @[Bitwise.scala 72:15]
              node _T_37 = mux(_T_36, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
              node _T_38 = cat(_T_37, _T_34) @[Cat.scala 29:58]
              node _T_39 = cat(_T_38, UInt<1>("h00")) @[Cat.scala 29:58]
              io.sextImm <= _T_39 @[helpers.scala 66:18]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_40 = eq(UInt<2>("h03"), opcode) @[Conditional.scala 37:30]
              when _T_40 : @[Conditional.scala 39:67]
                node _T_41 = bits(io.instruction, 31, 20) @[helpers.scala 69:31]
                node _T_42 = bits(_T_41, 11, 11) @[helpers.scala 70:36]
                node _T_43 = bits(_T_42, 0, 0) @[Bitwise.scala 72:15]
                node _T_44 = mux(_T_43, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                node _T_45 = cat(_T_44, _T_41) @[Cat.scala 29:58]
                io.sextImm <= _T_45 @[helpers.scala 70:18]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_46 = eq(UInt<6>("h023"), opcode) @[Conditional.scala 37:30]
                when _T_46 : @[Conditional.scala 39:67]
                  node _T_47 = bits(io.instruction, 31, 25) @[helpers.scala 73:35]
                  node _T_48 = bits(io.instruction, 11, 7) @[helpers.scala 73:59]
                  node _T_49 = cat(_T_47, _T_48) @[Cat.scala 29:58]
                  node _T_50 = bits(_T_49, 11, 11) @[helpers.scala 74:36]
                  node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
                  node _T_52 = mux(_T_51, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                  node _T_53 = cat(_T_52, _T_49) @[Cat.scala 29:58]
                  io.sextImm <= _T_53 @[helpers.scala 74:18]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_54 = eq(UInt<5>("h013"), opcode) @[Conditional.scala 37:30]
                  when _T_54 : @[Conditional.scala 39:67]
                    node _T_55 = bits(io.instruction, 31, 20) @[helpers.scala 77:31]
                    node _T_56 = bits(_T_55, 11, 11) @[helpers.scala 78:36]
                    node _T_57 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
                    node _T_58 = mux(_T_57, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                    node _T_59 = cat(_T_58, _T_55) @[Cat.scala 29:58]
                    io.sextImm <= _T_59 @[helpers.scala 78:18]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_60 = eq(UInt<7>("h073"), opcode) @[Conditional.scala 37:30]
                    when _T_60 : @[Conditional.scala 39:67]
                      node _T_61 = mux(UInt<1>("h00"), UInt<27>("h07ffffff"), UInt<27>("h00")) @[Bitwise.scala 72:12]
                      node _T_62 = bits(io.instruction, 19, 15) @[helpers.scala 81:53]
                      node _T_63 = cat(_T_61, _T_62) @[Cat.scala 29:58]
                      io.sextImm <= _T_63 @[helpers.scala 81:18]
                      skip @[Conditional.scala 39:67]
    
  module Adder : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = add(io.inputx, io.inputy) @[helpers.scala 23:26]
    node _T_1 = tail(_T, 1) @[helpers.scala 23:26]
    io.result <= _T_1 @[helpers.scala 23:13]
    
  module Adder_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = add(io.inputx, io.inputy) @[helpers.scala 23:26]
    node _T_1 = tail(_T, 1) @[helpers.scala 23:26]
    io.result <= _T_1 @[helpers.scala 23:13]
    
  module ForwardingUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip exmemrd : UInt<5>, flip exmemrw : UInt<1>, flip memwbrd : UInt<5>, flip memwbrw : UInt<1>, forwardA : UInt<2>, forwardB : UInt<2>}
    
    wire A : UInt @[forwarding.scala 39:15]
    wire B : UInt @[forwarding.scala 40:15]
    node _T = eq(io.exmemrd, io.rs1) @[forwarding.scala 42:35]
    node _T_1 = and(io.exmemrw, _T) @[forwarding.scala 42:20]
    when _T_1 : @[forwarding.scala 42:48]
      A <= UInt<1>("h01") @[forwarding.scala 43:7]
      skip @[forwarding.scala 42:48]
    else : @[forwarding.scala 44:55]
      node _T_2 = eq(io.memwbrd, io.rs1) @[forwarding.scala 44:42]
      node _T_3 = and(io.memwbrw, _T_2) @[forwarding.scala 44:27]
      when _T_3 : @[forwarding.scala 44:55]
        A <= UInt<2>("h02") @[forwarding.scala 45:7]
        skip @[forwarding.scala 44:55]
      else : @[forwarding.scala 46:16]
        A <= UInt<1>("h00") @[forwarding.scala 47:7]
        skip @[forwarding.scala 46:16]
    io.forwardA <= A @[forwarding.scala 49:15]
    node _T_4 = eq(io.exmemrd, io.rs2) @[forwarding.scala 51:35]
    node _T_5 = and(io.exmemrw, _T_4) @[forwarding.scala 51:20]
    when _T_5 : @[forwarding.scala 51:48]
      B <= UInt<1>("h01") @[forwarding.scala 52:7]
      skip @[forwarding.scala 51:48]
    else : @[forwarding.scala 53:55]
      node _T_6 = eq(io.memwbrd, io.rs2) @[forwarding.scala 53:42]
      node _T_7 = and(io.memwbrw, _T_6) @[forwarding.scala 53:27]
      when _T_7 : @[forwarding.scala 53:55]
        B <= UInt<2>("h02") @[forwarding.scala 54:7]
        skip @[forwarding.scala 53:55]
      else : @[forwarding.scala 55:16]
        B <= UInt<1>("h00") @[forwarding.scala 56:7]
        skip @[forwarding.scala 55:16]
    io.forwardB <= B @[forwarding.scala 58:15]
    
  module HazardUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip idex_memread : UInt<1>, flip idex_rd : UInt<5>, flip exmem_taken : UInt<1>, pcwrite : UInt<2>, ifid_bubble : UInt<1>, idex_bubble : UInt<1>, exmem_bubble : UInt<1>, ifid_flush : UInt<1>}
    
    wire pcwrite : UInt @[hazard.scala 42:26]
    wire ifid_bubble : UInt<1> @[hazard.scala 43:26]
    wire idex_bubble : UInt<1> @[hazard.scala 44:26]
    wire exmem_bubble : UInt<1> @[hazard.scala 45:26]
    wire ifid_flush : UInt<1> @[hazard.scala 46:26]
    node _T = eq(io.exmem_taken, UInt<1>("h01")) @[hazard.scala 49:24]
    when _T : @[hazard.scala 49:36]
      pcwrite <= UInt<1>("h01") @[hazard.scala 50:13]
      ifid_bubble <= UInt<1>("h00") @[hazard.scala 51:17]
      idex_bubble <= UInt<1>("h01") @[hazard.scala 52:17]
      exmem_bubble <= UInt<1>("h01") @[hazard.scala 53:18]
      ifid_flush <= UInt<1>("h01") @[hazard.scala 54:16]
      skip @[hazard.scala 49:36]
    else : @[hazard.scala 55:89]
      node _T_1 = eq(io.idex_rd, io.rs1) @[hazard.scala 55:48]
      node _T_2 = eq(io.idex_rd, io.rs2) @[hazard.scala 55:75]
      node _T_3 = or(_T_1, _T_2) @[hazard.scala 55:60]
      node _T_4 = and(io.idex_memread, _T_3) @[hazard.scala 55:32]
      when _T_4 : @[hazard.scala 55:89]
        pcwrite <= UInt<2>("h02") @[hazard.scala 56:13]
        ifid_bubble <= UInt<1>("h01") @[hazard.scala 57:17]
        idex_bubble <= UInt<1>("h01") @[hazard.scala 58:17]
        exmem_bubble <= UInt<1>("h00") @[hazard.scala 59:18]
        ifid_flush <= UInt<1>("h00") @[hazard.scala 60:16]
        skip @[hazard.scala 55:89]
      else : @[hazard.scala 61:16]
        pcwrite <= UInt<1>("h00") @[hazard.scala 62:13]
        ifid_bubble <= UInt<1>("h00") @[hazard.scala 63:17]
        idex_bubble <= UInt<1>("h00") @[hazard.scala 64:17]
        exmem_bubble <= UInt<1>("h00") @[hazard.scala 65:18]
        ifid_flush <= UInt<1>("h00") @[hazard.scala 66:16]
        skip @[hazard.scala 61:16]
    io.pcwrite <= pcwrite @[hazard.scala 69:14]
    io.ifid_bubble <= ifid_bubble @[hazard.scala 70:18]
    io.idex_bubble <= idex_bubble @[hazard.scala 71:18]
    io.exmem_bubble <= exmem_bubble @[hazard.scala 72:19]
    io.ifid_flush <= ifid_flush @[hazard.scala 73:17]
    
  module PipelinedCPU : 
    input clock : Clock
    input reset : Reset
    output io : {flip imem : {flip address : UInt<32>, instruction : UInt<32>}, flip dmem : {flip address : UInt<32>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>}}
    
    reg pc : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[cpu.scala 87:27]
    inst control of Control @[cpu.scala 88:26]
    control.clock <= clock
    control.reset <= reset
    inst branchCtrl of BranchControl @[cpu.scala 89:26]
    branchCtrl.clock <= clock
    branchCtrl.reset <= reset
    inst registers of RegisterFile @[cpu.scala 90:26]
    registers.clock <= clock
    registers.reset <= reset
    inst aluControl of ALUControl @[cpu.scala 91:26]
    aluControl.clock <= clock
    aluControl.reset <= reset
    inst alu of ALU @[cpu.scala 92:26]
    alu.clock <= clock
    alu.reset <= reset
    inst immGen of ImmediateGenerator @[cpu.scala 93:26]
    immGen.clock <= clock
    immGen.reset <= reset
    inst pcPlusFour of Adder @[cpu.scala 94:26]
    pcPlusFour.clock <= clock
    pcPlusFour.reset <= reset
    inst branchAdd of Adder_1 @[cpu.scala 95:26]
    branchAdd.clock <= clock
    branchAdd.reset <= reset
    inst forwarding of ForwardingUnit @[cpu.scala 96:26]
    forwarding.clock <= clock
    forwarding.reset <= reset
    inst hazard of HazardUnit @[cpu.scala 97:26]
    hazard.clock <= clock
    hazard.reset <= reset
    reg value : UInt<30>, clock with : (reset => (reset, UInt<30>("h00"))) @[Counter.scala 29:33]
    wire _T : UInt<1>
    _T <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 67:17]
      node _T_1 = eq(value, UInt<30>("h03fffffff")) @[Counter.scala 38:24]
      node _T_2 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_3 = tail(_T_2, 1) @[Counter.scala 39:22]
      value <= _T_3 @[Counter.scala 39:13]
      _T <= _T_1 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    wire _T_4 : {instruction : UInt<32>, pc : UInt<32>, pcplusfour : UInt<32>} @[cpu.scala 100:40]
    _T_4.pcplusfour <= UInt<32>("h00") @[cpu.scala 100:40]
    _T_4.pc <= UInt<32>("h00") @[cpu.scala 100:40]
    _T_4.instruction <= UInt<32>("h00") @[cpu.scala 100:40]
    reg if_id : {instruction : UInt<32>, pc : UInt<32>, pcplusfour : UInt<32>}, clock with : (reset => (reset, _T_4)) @[cpu.scala 100:27]
    wire _T_5 : {pc : UInt<32>, pcplusfour : UInt<32>, imm : UInt<32>, rs1 : UInt<5>, rs2 : UInt<5>, rd : UInt<5>, funct3 : UInt<3>, funct7 : UInt<7>, readdata1 : UInt<32>, readdata2 : UInt<32>, excontrol : {add : UInt<1>, immediate : UInt<1>, alusrc1 : UInt<2>, branch : UInt<1>, jump : UInt<2>}, mcontrol : {memread : UInt<1>, memwrite : UInt<1>}, wbcontrol : {regwrite : UInt<1>, toreg : UInt<2>}} @[cpu.scala 101:40]
    _T_5.wbcontrol.toreg <= UInt<2>("h00") @[cpu.scala 101:40]
    _T_5.wbcontrol.regwrite <= UInt<1>("h00") @[cpu.scala 101:40]
    _T_5.mcontrol.memwrite <= UInt<1>("h00") @[cpu.scala 101:40]
    _T_5.mcontrol.memread <= UInt<1>("h00") @[cpu.scala 101:40]
    _T_5.excontrol.jump <= UInt<2>("h00") @[cpu.scala 101:40]
    _T_5.excontrol.branch <= UInt<1>("h00") @[cpu.scala 101:40]
    _T_5.excontrol.alusrc1 <= UInt<2>("h00") @[cpu.scala 101:40]
    _T_5.excontrol.immediate <= UInt<1>("h00") @[cpu.scala 101:40]
    _T_5.excontrol.add <= UInt<1>("h00") @[cpu.scala 101:40]
    _T_5.readdata2 <= UInt<32>("h00") @[cpu.scala 101:40]
    _T_5.readdata1 <= UInt<32>("h00") @[cpu.scala 101:40]
    _T_5.funct7 <= UInt<7>("h00") @[cpu.scala 101:40]
    _T_5.funct3 <= UInt<3>("h00") @[cpu.scala 101:40]
    _T_5.rd <= UInt<5>("h00") @[cpu.scala 101:40]
    _T_5.rs2 <= UInt<5>("h00") @[cpu.scala 101:40]
    _T_5.rs1 <= UInt<5>("h00") @[cpu.scala 101:40]
    _T_5.imm <= UInt<32>("h00") @[cpu.scala 101:40]
    _T_5.pcplusfour <= UInt<32>("h00") @[cpu.scala 101:40]
    _T_5.pc <= UInt<32>("h00") @[cpu.scala 101:40]
    reg id_ex : {pc : UInt<32>, pcplusfour : UInt<32>, imm : UInt<32>, rs1 : UInt<5>, rs2 : UInt<5>, rd : UInt<5>, funct3 : UInt<3>, funct7 : UInt<7>, readdata1 : UInt<32>, readdata2 : UInt<32>, excontrol : {add : UInt<1>, immediate : UInt<1>, alusrc1 : UInt<2>, branch : UInt<1>, jump : UInt<2>}, mcontrol : {memread : UInt<1>, memwrite : UInt<1>}, wbcontrol : {regwrite : UInt<1>, toreg : UInt<2>}}, clock with : (reset => (reset, _T_5)) @[cpu.scala 101:27]
    wire _T_6 : {pcplusfour : UInt<32>, aluresult : UInt<32>, branchpc : UInt<32>, writedata : UInt<32>, rd : UInt<5>, funct3 : UInt<3>, taken : UInt<1>, mcontrol : {memread : UInt<1>, memwrite : UInt<1>}, wbcontrol : {regwrite : UInt<1>, toreg : UInt<2>}} @[cpu.scala 102:40]
    _T_6.wbcontrol.toreg <= UInt<2>("h00") @[cpu.scala 102:40]
    _T_6.wbcontrol.regwrite <= UInt<1>("h00") @[cpu.scala 102:40]
    _T_6.mcontrol.memwrite <= UInt<1>("h00") @[cpu.scala 102:40]
    _T_6.mcontrol.memread <= UInt<1>("h00") @[cpu.scala 102:40]
    _T_6.taken <= UInt<1>("h00") @[cpu.scala 102:40]
    _T_6.funct3 <= UInt<3>("h00") @[cpu.scala 102:40]
    _T_6.rd <= UInt<5>("h00") @[cpu.scala 102:40]
    _T_6.writedata <= UInt<32>("h00") @[cpu.scala 102:40]
    _T_6.branchpc <= UInt<32>("h00") @[cpu.scala 102:40]
    _T_6.aluresult <= UInt<32>("h00") @[cpu.scala 102:40]
    _T_6.pcplusfour <= UInt<32>("h00") @[cpu.scala 102:40]
    reg ex_mem : {pcplusfour : UInt<32>, aluresult : UInt<32>, branchpc : UInt<32>, writedata : UInt<32>, rd : UInt<5>, funct3 : UInt<3>, taken : UInt<1>, mcontrol : {memread : UInt<1>, memwrite : UInt<1>}, wbcontrol : {regwrite : UInt<1>, toreg : UInt<2>}}, clock with : (reset => (reset, _T_6)) @[cpu.scala 102:27]
    wire _T_7 : {pcplusfour : UInt<32>, readdata : UInt<32>, rd : UInt<5>, aluresult : UInt<32>, wbcontrol : {regwrite : UInt<1>, toreg : UInt<2>}} @[cpu.scala 103:40]
    _T_7.wbcontrol.toreg <= UInt<2>("h00") @[cpu.scala 103:40]
    _T_7.wbcontrol.regwrite <= UInt<1>("h00") @[cpu.scala 103:40]
    _T_7.aluresult <= UInt<32>("h00") @[cpu.scala 103:40]
    _T_7.rd <= UInt<5>("h00") @[cpu.scala 103:40]
    _T_7.readdata <= UInt<32>("h00") @[cpu.scala 103:40]
    _T_7.pcplusfour <= UInt<32>("h00") @[cpu.scala 103:40]
    reg mem_wb : {pcplusfour : UInt<32>, readdata : UInt<32>, rd : UInt<5>, aluresult : UInt<32>, wbcontrol : {regwrite : UInt<1>, toreg : UInt<2>}}, clock with : (reset => (reset, _T_7)) @[cpu.scala 103:27]
    node _T_8 = asUInt(reset) @[cpu.scala 107:9]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[cpu.scala 107:9]
    when _T_9 : @[cpu.scala 107:9]
      printf(clock, UInt<1>(1), "Cycle=%d ", value) @[cpu.scala 107:9]
      skip @[cpu.scala 107:9]
    wire next_pc : UInt<32> @[cpu.scala 112:21]
    wire write_data : UInt<32> @[cpu.scala 115:24]
    pc <= next_pc @[cpu.scala 123:6]
    io.imem.address <= pc @[cpu.scala 126:19]
    pcPlusFour.io.inputx <= pc @[cpu.scala 129:24]
    pcPlusFour.io.inputy <= UInt<3>("h04") @[cpu.scala 130:24]
    node _T_10 = eq(hazard.io.ifid_flush, UInt<1>("h01")) @[cpu.scala 134:30]
    when _T_10 : @[cpu.scala 134:42]
      if_id.instruction <= UInt<5>("h013") @[cpu.scala 135:23]
      if_id.pc <= UInt<1>("h00") @[cpu.scala 136:14]
      if_id.pcplusfour <= UInt<1>("h00") @[cpu.scala 137:22]
      skip @[cpu.scala 134:42]
    else : @[cpu.scala 138:50]
      node _T_11 = eq(hazard.io.ifid_bubble, UInt<1>("h01")) @[cpu.scala 138:38]
      when _T_11 : @[cpu.scala 138:50]
        if_id.instruction <= if_id.instruction @[cpu.scala 139:23]
        if_id.pc <= if_id.pc @[cpu.scala 140:14]
        if_id.pcplusfour <= if_id.pcplusfour @[cpu.scala 141:22]
        skip @[cpu.scala 138:50]
      else : @[cpu.scala 142:16]
        if_id.instruction <= io.imem.instruction @[cpu.scala 143:23]
        if_id.pc <= pc @[cpu.scala 144:23]
        if_id.pcplusfour <= pcPlusFour.io.result @[cpu.scala 145:23]
        skip @[cpu.scala 142:16]
    node _T_12 = asUInt(reset) @[cpu.scala 148:9]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[cpu.scala 148:9]
    when _T_13 : @[cpu.scala 148:9]
      printf(clock, UInt<1>(1), "IF/ID: IFIDBundle(instruction -> %d, pc -> %d, pcplusfour -> %d)\n", if_id.instruction, if_id.pc, if_id.pcplusfour) @[cpu.scala 148:9]
      skip @[cpu.scala 148:9]
    node rs1 = bits(if_id.instruction, 19, 15) @[cpu.scala 154:30]
    node rs2 = bits(if_id.instruction, 24, 20) @[cpu.scala 155:30]
    hazard.io.rs1 <= rs1 @[cpu.scala 158:17]
    hazard.io.rs2 <= rs2 @[cpu.scala 159:17]
    node _T_14 = bits(if_id.instruction, 6, 0) @[cpu.scala 162:41]
    control.io.opcode <= _T_14 @[cpu.scala 162:21]
    registers.io.readreg1 <= rs1 @[cpu.scala 165:25]
    registers.io.readreg2 <= rs2 @[cpu.scala 166:25]
    immGen.io.instruction <= if_id.instruction @[cpu.scala 169:25]
    id_ex.pc <= if_id.pc @[cpu.scala 172:12]
    id_ex.pcplusfour <= if_id.pcplusfour @[cpu.scala 173:20]
    id_ex.imm <= immGen.io.sextImm @[cpu.scala 174:13]
    id_ex.rs1 <= rs1 @[cpu.scala 175:13]
    id_ex.rs2 <= rs2 @[cpu.scala 176:13]
    node _T_15 = bits(if_id.instruction, 11, 7) @[cpu.scala 177:32]
    id_ex.rd <= _T_15 @[cpu.scala 177:12]
    node _T_16 = bits(if_id.instruction, 14, 12) @[cpu.scala 178:36]
    id_ex.funct3 <= _T_16 @[cpu.scala 178:16]
    node _T_17 = bits(if_id.instruction, 31, 25) @[cpu.scala 179:36]
    id_ex.funct7 <= _T_17 @[cpu.scala 179:16]
    id_ex.readdata1 <= registers.io.readdata1 @[cpu.scala 180:19]
    id_ex.readdata2 <= registers.io.readdata2 @[cpu.scala 181:19]
    node _T_18 = eq(hazard.io.idex_bubble, UInt<1>("h01")) @[cpu.scala 184:31]
    when _T_18 : @[cpu.scala 184:43]
      id_ex.excontrol.branch <= UInt<1>("h00") @[cpu.scala 185:28]
      id_ex.excontrol.jump <= UInt<1>("h00") @[cpu.scala 186:26]
      skip @[cpu.scala 184:43]
    else : @[cpu.scala 187:16]
      id_ex.excontrol.branch <= control.io.branch @[cpu.scala 188:28]
      id_ex.excontrol.jump <= control.io.jump @[cpu.scala 189:26]
      skip @[cpu.scala 187:16]
    id_ex.excontrol.add <= control.io.add @[cpu.scala 191:23]
    id_ex.excontrol.immediate <= control.io.immediate @[cpu.scala 192:29]
    id_ex.excontrol.alusrc1 <= control.io.alusrc1 @[cpu.scala 193:27]
    node _T_19 = eq(hazard.io.idex_bubble, UInt<1>("h01")) @[cpu.scala 196:31]
    when _T_19 : @[cpu.scala 196:43]
      id_ex.mcontrol.memread <= UInt<1>("h00") @[cpu.scala 197:28]
      id_ex.mcontrol.memwrite <= UInt<1>("h00") @[cpu.scala 198:29]
      skip @[cpu.scala 196:43]
    else : @[cpu.scala 199:16]
      id_ex.mcontrol.memread <= control.io.memread @[cpu.scala 200:28]
      id_ex.mcontrol.memwrite <= control.io.memwrite @[cpu.scala 201:29]
      skip @[cpu.scala 199:16]
    node _T_20 = eq(hazard.io.idex_bubble, UInt<1>("h01")) @[cpu.scala 205:31]
    when _T_20 : @[cpu.scala 205:43]
      id_ex.wbcontrol.regwrite <= UInt<1>("h00") @[cpu.scala 206:30]
      skip @[cpu.scala 205:43]
    else : @[cpu.scala 207:16]
      id_ex.wbcontrol.regwrite <= control.io.regwrite @[cpu.scala 208:30]
      skip @[cpu.scala 207:16]
    id_ex.wbcontrol.toreg <= control.io.toreg @[cpu.scala 210:25]
    node _T_21 = asUInt(reset) @[cpu.scala 212:9]
    node _T_22 = eq(_T_21, UInt<1>("h00")) @[cpu.scala 212:9]
    when _T_22 : @[cpu.scala 212:9]
      printf(clock, UInt<1>(1), "DASM(%x)\n", if_id.instruction) @[cpu.scala 212:9]
      skip @[cpu.scala 212:9]
    node _T_23 = asUInt(reset) @[cpu.scala 213:9]
    node _T_24 = eq(_T_23, UInt<1>("h00")) @[cpu.scala 213:9]
    when _T_24 : @[cpu.scala 213:9]
      printf(clock, UInt<1>(1), "ID/EX: IDEXBundle(pc -> %d, pcplusfour -> %d, imm -> %d, rs1 -> %d, rs2 -> %d, rd -> %d, funct3 -> %d, funct7 -> %d, readdata1 -> %d, readdata2 -> %d, excontrol -> EXControl(add -> %d, immediate -> %d, alusrc1 -> %d, branch -> %d, jump -> %d), mcontrol -> MControl(memread -> %d, memwrite -> %d), wbcontrol -> WBControl(regwrite -> %d, toreg -> %d))\n", id_ex.pc, id_ex.pcplusfour, id_ex.imm, id_ex.rs1, id_ex.rs2, id_ex.rd, id_ex.funct3, id_ex.funct7, id_ex.readdata1, id_ex.readdata2, id_ex.excontrol.add, id_ex.excontrol.immediate, id_ex.excontrol.alusrc1, id_ex.excontrol.branch, id_ex.excontrol.jump, id_ex.mcontrol.memread, id_ex.mcontrol.memwrite, id_ex.wbcontrol.regwrite, id_ex.wbcontrol.toreg) @[cpu.scala 213:9]
      skip @[cpu.scala 213:9]
    hazard.io.idex_memread <= id_ex.mcontrol.memread @[cpu.scala 220:26]
    hazard.io.idex_rd <= id_ex.rd @[cpu.scala 221:21]
    forwarding.io.rs1 <= id_ex.rs1 @[cpu.scala 224:21]
    forwarding.io.rs2 <= id_ex.rs2 @[cpu.scala 225:21]
    aluControl.io.add <= id_ex.excontrol.add @[cpu.scala 228:27]
    aluControl.io.immediate <= id_ex.excontrol.immediate @[cpu.scala 229:27]
    aluControl.io.funct7 <= id_ex.funct7 @[cpu.scala 230:27]
    aluControl.io.funct3 <= id_ex.funct3 @[cpu.scala 231:27]
    wire forwarded_rs1 : UInt @[cpu.scala 234:27]
    forwarded_rs1 is invalid @[cpu.scala 235:17]
    node _T_25 = eq(UInt<1>("h00"), forwarding.io.forwardA) @[Conditional.scala 37:30]
    when _T_25 : @[Conditional.scala 40:58]
      forwarded_rs1 <= id_ex.readdata1 @[cpu.scala 237:29]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_26 = eq(UInt<1>("h01"), forwarding.io.forwardA) @[Conditional.scala 37:30]
      when _T_26 : @[Conditional.scala 39:67]
        forwarded_rs1 <= ex_mem.aluresult @[cpu.scala 238:29]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_27 = eq(UInt<2>("h02"), forwarding.io.forwardA) @[Conditional.scala 37:30]
        when _T_27 : @[Conditional.scala 39:67]
          forwarded_rs1 <= write_data @[cpu.scala 239:29]
          skip @[Conditional.scala 39:67]
    wire alu_inputx : UInt @[cpu.scala 243:24]
    alu_inputx is invalid @[cpu.scala 244:14]
    node _T_28 = eq(UInt<1>("h00"), id_ex.excontrol.alusrc1) @[Conditional.scala 37:30]
    when _T_28 : @[Conditional.scala 40:58]
      alu_inputx <= forwarded_rs1 @[cpu.scala 246:26]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_29 = eq(UInt<1>("h01"), id_ex.excontrol.alusrc1) @[Conditional.scala 37:30]
      when _T_29 : @[Conditional.scala 39:67]
        alu_inputx <= UInt<1>("h00") @[cpu.scala 247:26]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_30 = eq(UInt<2>("h02"), id_ex.excontrol.alusrc1) @[Conditional.scala 37:30]
        when _T_30 : @[Conditional.scala 39:67]
          alu_inputx <= id_ex.pc @[cpu.scala 248:26]
          skip @[Conditional.scala 39:67]
    wire forwarded_rs2 : UInt @[cpu.scala 252:27]
    forwarded_rs2 is invalid @[cpu.scala 253:17]
    node _T_31 = eq(UInt<1>("h00"), forwarding.io.forwardB) @[Conditional.scala 37:30]
    when _T_31 : @[Conditional.scala 40:58]
      forwarded_rs2 <= id_ex.readdata2 @[cpu.scala 255:29]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_32 = eq(UInt<1>("h01"), forwarding.io.forwardB) @[Conditional.scala 37:30]
      when _T_32 : @[Conditional.scala 39:67]
        forwarded_rs2 <= ex_mem.aluresult @[cpu.scala 256:29]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_33 = eq(UInt<2>("h02"), forwarding.io.forwardB) @[Conditional.scala 37:30]
        when _T_33 : @[Conditional.scala 39:67]
          forwarded_rs2 <= write_data @[cpu.scala 257:29]
          skip @[Conditional.scala 39:67]
    wire alu_inputy : UInt @[cpu.scala 261:24]
    node _T_34 = eq(id_ex.excontrol.immediate, UInt<1>("h01")) @[cpu.scala 262:35]
    when _T_34 : @[cpu.scala 262:47]
      alu_inputy <= id_ex.imm @[cpu.scala 263:16]
      skip @[cpu.scala 262:47]
    else : @[cpu.scala 264:16]
      alu_inputy <= forwarded_rs2 @[cpu.scala 265:16]
      skip @[cpu.scala 264:16]
    branchCtrl.io.branch <= id_ex.excontrol.branch @[cpu.scala 269:24]
    branchCtrl.io.funct3 <= id_ex.funct3 @[cpu.scala 270:24]
    branchCtrl.io.inputx <= forwarded_rs1 @[cpu.scala 271:24]
    branchCtrl.io.inputy <= forwarded_rs2 @[cpu.scala 272:24]
    alu.io.operation <= aluControl.io.operation @[cpu.scala 275:20]
    alu.io.inputx <= alu_inputx @[cpu.scala 276:17]
    alu.io.inputy <= alu_inputy @[cpu.scala 277:17]
    branchAdd.io.inputx <= id_ex.pc @[cpu.scala 280:23]
    branchAdd.io.inputy <= id_ex.imm @[cpu.scala 281:23]
    ex_mem.pcplusfour <= id_ex.pcplusfour @[cpu.scala 284:21]
    ex_mem.aluresult <= alu.io.result @[cpu.scala 285:20]
    ex_mem.writedata <= forwarded_rs2 @[cpu.scala 286:20]
    ex_mem.rd <= id_ex.rd @[cpu.scala 287:13]
    ex_mem.funct3 <= id_ex.funct3 @[cpu.scala 288:17]
    when hazard.io.exmem_bubble : @[cpu.scala 291:33]
      ex_mem.mcontrol.memread <= UInt<1>("h00") @[cpu.scala 292:29]
      ex_mem.mcontrol.memwrite <= UInt<1>("h00") @[cpu.scala 293:30]
      skip @[cpu.scala 291:33]
    else : @[cpu.scala 294:16]
      ex_mem.mcontrol.memwrite <= id_ex.mcontrol.memwrite @[cpu.scala 295:21]
      ex_mem.mcontrol.memread <= id_ex.mcontrol.memread @[cpu.scala 295:21]
      skip @[cpu.scala 294:16]
    when hazard.io.exmem_bubble : @[cpu.scala 299:33]
      ex_mem.wbcontrol.regwrite <= UInt<1>("h00") @[cpu.scala 300:31]
      ex_mem.wbcontrol.toreg <= UInt<1>("h00") @[cpu.scala 301:28]
      skip @[cpu.scala 299:33]
    else : @[cpu.scala 302:16]
      ex_mem.wbcontrol.toreg <= id_ex.wbcontrol.toreg @[cpu.scala 303:22]
      ex_mem.wbcontrol.regwrite <= id_ex.wbcontrol.regwrite @[cpu.scala 303:22]
      skip @[cpu.scala 302:16]
    when hazard.io.exmem_bubble : @[cpu.scala 307:33]
      ex_mem.taken <= UInt<1>("h00") @[cpu.scala 308:18]
      skip @[cpu.scala 307:33]
    else : @[cpu.scala 309:16]
      node _T_35 = neq(id_ex.excontrol.jump, UInt<1>("h00")) @[cpu.scala 310:67]
      node _T_36 = or(branchCtrl.io.taken, _T_35) @[cpu.scala 310:42]
      ex_mem.taken <= _T_36 @[cpu.scala 310:18]
      skip @[cpu.scala 309:16]
    node _T_37 = eq(id_ex.excontrol.jump, UInt<2>("h02")) @[cpu.scala 312:53]
    node _T_38 = or(branchCtrl.io.taken, _T_37) @[cpu.scala 312:29]
    when _T_38 : @[cpu.scala 312:62]
      ex_mem.branchpc <= branchAdd.io.result @[cpu.scala 313:21]
      skip @[cpu.scala 312:62]
    else : @[cpu.scala 314:46]
      node _T_39 = eq(id_ex.excontrol.jump, UInt<2>("h03")) @[cpu.scala 314:37]
      when _T_39 : @[cpu.scala 314:46]
        node _T_40 = mux(UInt<1>("h01"), UInt<31>("h07fffffff"), UInt<31>("h00")) @[Bitwise.scala 72:12]
        node _T_41 = cat(_T_40, UInt<1>("h00")) @[Cat.scala 29:58]
        node _T_42 = and(alu.io.result, _T_41) @[cpu.scala 315:38]
        ex_mem.branchpc <= _T_42 @[cpu.scala 315:21]
        skip @[cpu.scala 314:46]
      else : @[cpu.scala 316:16]
        ex_mem.branchpc <= id_ex.pcplusfour @[cpu.scala 317:21]
        skip @[cpu.scala 316:16]
    node _T_43 = asUInt(reset) @[cpu.scala 319:9]
    node _T_44 = eq(_T_43, UInt<1>("h00")) @[cpu.scala 319:9]
    when _T_44 : @[cpu.scala 319:9]
      printf(clock, UInt<1>(1), "EX/MEM: EXMEMBundle(pcplusfour -> %d, aluresult -> %d, branchpc -> %d, writedata -> %d, rd -> %d, funct3 -> %d, taken -> %d, mcontrol -> MControl(memread -> %d, memwrite -> %d), wbcontrol -> WBControl(regwrite -> %d, toreg -> %d))\n", ex_mem.pcplusfour, ex_mem.aluresult, ex_mem.branchpc, ex_mem.writedata, ex_mem.rd, ex_mem.funct3, ex_mem.taken, ex_mem.mcontrol.memread, ex_mem.mcontrol.memwrite, ex_mem.wbcontrol.regwrite, ex_mem.wbcontrol.toreg) @[cpu.scala 319:9]
      skip @[cpu.scala 319:9]
    io.dmem.address <= ex_mem.aluresult @[cpu.scala 326:21]
    io.dmem.writedata <= ex_mem.writedata @[cpu.scala 327:21]
    io.dmem.memread <= ex_mem.mcontrol.memread @[cpu.scala 328:21]
    io.dmem.memwrite <= ex_mem.mcontrol.memwrite @[cpu.scala 329:21]
    node _T_45 = bits(ex_mem.funct3, 1, 0) @[cpu.scala 330:37]
    io.dmem.maskmode <= _T_45 @[cpu.scala 330:21]
    node _T_46 = bits(ex_mem.funct3, 2, 2) @[cpu.scala 331:38]
    node _T_47 = not(_T_46) @[cpu.scala 331:24]
    io.dmem.sext <= _T_47 @[cpu.scala 331:21]
    node _T_48 = eq(hazard.io.pcwrite, UInt<1>("h00")) @[cpu.scala 334:27]
    when _T_48 : @[cpu.scala 334:36]
      next_pc <= pcPlusFour.io.result @[cpu.scala 335:13]
      skip @[cpu.scala 334:36]
    else : @[cpu.scala 336:43]
      node _T_49 = eq(hazard.io.pcwrite, UInt<1>("h01")) @[cpu.scala 336:34]
      when _T_49 : @[cpu.scala 336:43]
        next_pc <= ex_mem.branchpc @[cpu.scala 337:13]
        skip @[cpu.scala 336:43]
      else : @[cpu.scala 338:16]
        next_pc <= pc @[cpu.scala 339:13]
        skip @[cpu.scala 338:16]
    hazard.io.exmem_taken <= ex_mem.taken @[cpu.scala 342:25]
    forwarding.io.exmemrw <= ex_mem.wbcontrol.regwrite @[cpu.scala 345:25]
    forwarding.io.exmemrd <= ex_mem.rd @[cpu.scala 346:25]
    mem_wb.pcplusfour <= ex_mem.pcplusfour @[cpu.scala 349:21]
    mem_wb.readdata <= io.dmem.readdata @[cpu.scala 350:19]
    mem_wb.aluresult <= ex_mem.aluresult @[cpu.scala 351:20]
    mem_wb.rd <= ex_mem.rd @[cpu.scala 352:13]
    mem_wb.wbcontrol.toreg <= ex_mem.wbcontrol.toreg @[cpu.scala 353:20]
    mem_wb.wbcontrol.regwrite <= ex_mem.wbcontrol.regwrite @[cpu.scala 353:20]
    node _T_50 = asUInt(reset) @[cpu.scala 355:9]
    node _T_51 = eq(_T_50, UInt<1>("h00")) @[cpu.scala 355:9]
    when _T_51 : @[cpu.scala 355:9]
      printf(clock, UInt<1>(1), "MEM/WB: MEMWBBundle(pcplusfour -> %d, readdata -> %d, rd -> %d, aluresult -> %d, wbcontrol -> WBControl(regwrite -> %d, toreg -> %d))\n", mem_wb.pcplusfour, mem_wb.readdata, mem_wb.rd, mem_wb.aluresult, mem_wb.wbcontrol.regwrite, mem_wb.wbcontrol.toreg) @[cpu.scala 355:9]
      skip @[cpu.scala 355:9]
    node _T_52 = eq(mem_wb.wbcontrol.toreg, UInt<1>("h00")) @[cpu.scala 362:32]
    when _T_52 : @[cpu.scala 362:41]
      write_data <= mem_wb.aluresult @[cpu.scala 363:16]
      skip @[cpu.scala 362:41]
    else : @[cpu.scala 364:48]
      node _T_53 = eq(mem_wb.wbcontrol.toreg, UInt<1>("h01")) @[cpu.scala 364:39]
      when _T_53 : @[cpu.scala 364:48]
        write_data <= mem_wb.readdata @[cpu.scala 365:16]
        skip @[cpu.scala 364:48]
      else : @[cpu.scala 366:16]
        write_data <= mem_wb.pcplusfour @[cpu.scala 367:16]
        skip @[cpu.scala 366:16]
    node _T_54 = neq(mem_wb.rd, UInt<1>("h00")) @[cpu.scala 371:64]
    node _T_55 = and(mem_wb.wbcontrol.regwrite, _T_54) @[cpu.scala 371:50]
    registers.io.wen <= _T_55 @[cpu.scala 371:20]
    registers.io.writereg <= mem_wb.rd @[cpu.scala 372:25]
    registers.io.writedata <= write_data @[cpu.scala 373:26]
    forwarding.io.memwbrd <= mem_wb.rd @[cpu.scala 376:25]
    forwarding.io.memwbrw <= mem_wb.wbcontrol.regwrite @[cpu.scala 377:25]
    node _T_56 = asUInt(reset) @[cpu.scala 379:9]
    node _T_57 = eq(_T_56, UInt<1>("h00")) @[cpu.scala 379:9]
    when _T_57 : @[cpu.scala 379:9]
      printf(clock, UInt<1>(1), "---------------------------------------------\n") @[cpu.scala 379:9]
      skip @[cpu.scala 379:9]
    
  module DualPortedMemory : 
    input clock : Clock
    input reset : Reset
    output io : {imem : {flip address : UInt<32>, instruction : UInt<32>}, dmem : {flip address : UInt<32>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>}}
    
    io.dmem.readdata is invalid @[memory.scala 58:6]
    io.dmem.sext is invalid @[memory.scala 58:6]
    io.dmem.maskmode is invalid @[memory.scala 58:6]
    io.dmem.memwrite is invalid @[memory.scala 58:6]
    io.dmem.memread is invalid @[memory.scala 58:6]
    io.dmem.writedata is invalid @[memory.scala 58:6]
    io.dmem.address is invalid @[memory.scala 58:6]
    io.imem.instruction is invalid @[memory.scala 58:6]
    io.imem.address is invalid @[memory.scala 58:6]
    cmem memory : UInt<32>[1024] @[memory.scala 60:19]
    node _T = shr(io.imem.address, 2) @[memory.scala 63:49]
    node _T_1 = bits(_T, 9, 0) @[memory.scala 63:32]
    infer mport _T_2 = memory[_T_1], clock @[memory.scala 63:32]
    io.imem.instruction <= _T_2 @[memory.scala 63:23]
    when io.dmem.memread : @[memory.scala 65:26]
      wire _T_3 : UInt<32> @[memory.scala 66:24]
      node _T_4 = neq(io.dmem.maskmode, UInt<2>("h02")) @[memory.scala 68:28]
      when _T_4 : @[memory.scala 68:37]
        node _T_5 = bits(io.dmem.address, 1, 0) @[memory.scala 69:35]
        node _T_6 = shr(io.dmem.address, 2) @[memory.scala 70:42]
        node _T_7 = bits(_T_6, 9, 0) @[memory.scala 70:25]
        infer mport _T_8 = memory[_T_7], clock @[memory.scala 70:25]
        node _T_9 = mul(_T_5, UInt<4>("h08")) @[memory.scala 70:59]
        node _T_10 = dshr(_T_8, _T_9) @[memory.scala 70:48]
        _T_3 <= _T_10 @[memory.scala 70:16]
        node _T_11 = eq(io.dmem.maskmode, UInt<1>("h00")) @[memory.scala 71:30]
        when _T_11 : @[memory.scala 71:39]
          node _T_12 = shr(io.dmem.address, 2) @[memory.scala 72:44]
          node _T_13 = bits(_T_12, 9, 0) @[memory.scala 72:27]
          infer mport _T_14 = memory[_T_13], clock @[memory.scala 72:27]
          node _T_15 = and(_T_14, UInt<8>("h0ff")) @[memory.scala 72:50]
          _T_3 <= _T_15 @[memory.scala 72:18]
          skip @[memory.scala 71:39]
        else : @[memory.scala 73:20]
          node _T_16 = shr(io.dmem.address, 2) @[memory.scala 74:44]
          node _T_17 = bits(_T_16, 9, 0) @[memory.scala 74:27]
          infer mport _T_18 = memory[_T_17], clock @[memory.scala 74:27]
          node _T_19 = and(_T_18, UInt<16>("h0ffff")) @[memory.scala 74:50]
          _T_3 <= _T_19 @[memory.scala 74:18]
          skip @[memory.scala 73:20]
        skip @[memory.scala 68:37]
      else : @[memory.scala 76:18]
        node _T_20 = shr(io.dmem.address, 2) @[memory.scala 77:42]
        node _T_21 = bits(_T_20, 9, 0) @[memory.scala 77:25]
        infer mport _T_22 = memory[_T_21], clock @[memory.scala 77:25]
        _T_3 <= _T_22 @[memory.scala 77:16]
        skip @[memory.scala 76:18]
      when io.dmem.sext : @[memory.scala 80:25]
        node _T_23 = eq(io.dmem.maskmode, UInt<1>("h00")) @[memory.scala 81:30]
        when _T_23 : @[memory.scala 81:39]
          node _T_24 = bits(_T_3, 7, 7) @[memory.scala 82:50]
          node _T_25 = bits(_T_24, 0, 0) @[Bitwise.scala 72:15]
          node _T_26 = mux(_T_25, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
          node _T_27 = bits(_T_3, 7, 0) @[memory.scala 82:64]
          node _T_28 = cat(_T_26, _T_27) @[Cat.scala 29:58]
          io.dmem.readdata <= _T_28 @[memory.scala 82:26]
          skip @[memory.scala 81:39]
        else : @[memory.scala 83:20]
          node _T_29 = bits(_T_3, 15, 15) @[memory.scala 84:50]
          node _T_30 = bits(_T_29, 0, 0) @[Bitwise.scala 72:15]
          node _T_31 = mux(_T_30, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
          node _T_32 = bits(_T_3, 15, 0) @[memory.scala 84:65]
          node _T_33 = cat(_T_31, _T_32) @[Cat.scala 29:58]
          io.dmem.readdata <= _T_33 @[memory.scala 84:26]
          skip @[memory.scala 83:20]
        skip @[memory.scala 80:25]
      else : @[memory.scala 86:18]
        io.dmem.readdata <= _T_3 @[memory.scala 87:24]
        skip @[memory.scala 86:18]
      skip @[memory.scala 65:26]
    when io.dmem.memwrite : @[memory.scala 91:27]
      node _T_34 = neq(io.dmem.maskmode, UInt<2>("h02")) @[memory.scala 92:28]
      when _T_34 : @[memory.scala 92:37]
        node _T_35 = bits(io.dmem.address, 1, 0) @[memory.scala 93:35]
        wire _T_36 : UInt<32> @[memory.scala 95:26]
        node _T_37 = shr(io.dmem.address, 2) @[memory.scala 96:42]
        node _T_38 = bits(_T_37, 9, 0) @[memory.scala 96:25]
        infer mport _T_39 = memory[_T_38], clock @[memory.scala 96:25]
        _T_36 <= _T_39 @[memory.scala 96:16]
        wire _T_40 : UInt<32> @[memory.scala 98:22]
        node _T_41 = eq(io.dmem.maskmode, UInt<1>("h00")) @[memory.scala 99:30]
        when _T_41 : @[memory.scala 99:39]
          node _T_42 = mul(_T_35, UInt<4>("h08")) @[memory.scala 100:48]
          node _T_43 = dshl(UInt<8>("h0ff"), _T_42) @[memory.scala 100:37]
          node _T_44 = not(_T_43) @[memory.scala 100:28]
          node _T_45 = and(_T_36, _T_44) @[memory.scala 100:26]
          _T_40 <= _T_45 @[memory.scala 100:14]
          skip @[memory.scala 99:39]
        else : @[memory.scala 101:20]
          node _T_46 = mul(_T_35, UInt<4>("h08")) @[memory.scala 102:50]
          node _T_47 = dshl(UInt<16>("h0ffff"), _T_46) @[memory.scala 102:39]
          node _T_48 = not(_T_47) @[memory.scala 102:28]
          node _T_49 = and(_T_36, _T_48) @[memory.scala 102:26]
          _T_40 <= _T_49 @[memory.scala 102:14]
          skip @[memory.scala 101:20]
        node _T_50 = shr(io.dmem.address, 2) @[memory.scala 104:30]
        node _T_51 = bits(_T_50, 9, 0) @[memory.scala 104:13]
        infer mport _T_52 = memory[_T_51], clock @[memory.scala 104:13]
        node _T_53 = mul(_T_35, UInt<4>("h08")) @[memory.scala 104:76]
        node _T_54 = dshl(io.dmem.writedata, _T_53) @[memory.scala 104:65]
        node _T_55 = or(_T_40, _T_54) @[memory.scala 104:44]
        _T_52 <= _T_55 @[memory.scala 104:36]
        skip @[memory.scala 92:37]
      else : @[memory.scala 105:18]
        node _T_56 = shr(io.dmem.address, 2) @[memory.scala 106:30]
        node _T_57 = bits(_T_56, 9, 0) @[memory.scala 106:13]
        infer mport _T_58 = memory[_T_57], clock @[memory.scala 106:13]
        _T_58 <= io.dmem.writedata @[memory.scala 106:36]
        skip @[memory.scala 105:18]
      skip @[memory.scala 91:27]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {success : UInt<1>}
    
    io.success is invalid @[top.scala 12:14]
    inst cpu of PipelinedCPU @[top.scala 14:21]
    cpu.clock <= clock
    cpu.reset <= reset
    inst mem of DualPortedMemory @[top.scala 15:20]
    mem.clock <= clock
    mem.reset <= reset
    cpu.io.imem.instruction <= mem.io.imem.instruction @[top.scala 17:15]
    mem.io.imem.address <= cpu.io.imem.address @[top.scala 17:15]
    cpu.io.dmem.readdata <= mem.io.dmem.readdata @[top.scala 18:15]
    mem.io.dmem.sext <= cpu.io.dmem.sext @[top.scala 18:15]
    mem.io.dmem.maskmode <= cpu.io.dmem.maskmode @[top.scala 18:15]
    mem.io.dmem.memwrite <= cpu.io.dmem.memwrite @[top.scala 18:15]
    mem.io.dmem.memread <= cpu.io.dmem.memread @[top.scala 18:15]
    mem.io.dmem.writedata <= cpu.io.dmem.writedata @[top.scala 18:15]
    mem.io.dmem.address <= cpu.io.dmem.address @[top.scala 18:15]
    
